@page "/"

@using BlazorAppExcel.Modelo;
@using BlazorAppExcel.Servicio;
@inject IEmpleadoServicio _empleadoServicio;


@inject IJSRuntime _jsServicio;
@using ClosedXML.Excel;

<table class="table">
    <thead>
        <tr>
            <th>Nombre Completo</th>
            <th>Correo</th>
            <th>Sueldo</th>
            <th>Fecha Contrato</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var item in lista)
        {
            <tr>
                <td>@item.NombreCompleto</td>
                <td>@item.Correo</td>
                <td>@item.Sueldo</td>
                <td>@item.FechaContrato</td>
            </tr>
        }
    </tbody>


</table>

<button class="btn btn-success mt-4" @onclick="ExportarExcel">Descargar Excel</button>

@code{
    List<Empleado> lista = new List<Empleado>();
    protected override async Task OnInitializedAsync()
    {
        lista = await _empleadoServicio.Lista();
    }

    private async Task ExportarExcel()
    {
        using(var libro = new XLWorkbook())
        {
            IXLWorksheet hoja = libro.Worksheets.Add("empleados");

            hoja.Cell(1, 1).Value = "Nombre Completo";
            hoja.Cell(1, 2).Value = "Correo";
            hoja.Cell(1, 3).Value = "Sueldo";
            hoja.Cell(1, 4).Value = "Fecha de contrato";

            for(int fila = 1; fila <= lista.Count; fila++)
            {
                hoja.Cell(fila + 1, 1).Value = lista[fila - 1].NombreCompleto;
                hoja.Cell(fila + 1, 2).Value = lista[fila - 1].Correo;
                hoja.Cell(fila + 1, 3).Value = lista[fila - 1].Sueldo;
                hoja.Cell(fila + 1, 4).Value = lista[fila - 1].FechaContrato;
            }

            using(var memoria = new MemoryStream())
            {
                libro.SaveAs(memoria);
                var nombreExcel = string.Concat("Reporte ", DateTime.Now.ToString(), ".xlsx");

                await _jsServicio.InvokeAsync<object>(
                    "DescargarExcel",
                    nombreExcel,
                    Convert.ToBase64String(memoria.ToArray())
                );
            }


        }
    }

}
